Hello! I'm having some trouble with certificates. Here is my position:
I have a nodejs environment that consists on:
1 - A websocket server, running with "express" and using "websocket". It is a websocket;
2 - A simple nextjs server, it just connects to the websocket server, listens to the traffic and execute changes based on incoming websocket messages.

This second server will NOT be exposed to the internet so it does not matter if the connection is secure or not because it will only be shown to te server.
The first server, well, this is being exposed with NGROK. But this info is not important since my problem occurs even when I try to connect via wss://localhost:3001

The problem:
Well, I wanted to make this websocket server a little more secure, so I decided to implement a ssl connection with certificates.
Here is my tree view:

| -src
|   -websocket-server-ssl.js
|   -websocket-server.js
| -testSocket.bat
| -run.bat

Files inside the "src" folder are my code files. The "websocket-server-ssl.js" file is where my websocket with ssl runs and the "websocket-server.js" is used for testing purposes (without the ssl connection). It will NOT run with the application UNLESS I have to debug something other than the websocket connection.
The "websocket-server-ssl.js" its being started with this code:
const app = express();
const serverOptions = {
  key: fs.readFileSync(process.env.CERT_KEY_PATH),
  cert: fs.readFileSync(process.env.CERT_PATH),
  passphrase: process.env.CERT_CA_PASSPHRASE,
  requestCert: true, // Require client certificate
  rejectUnauthorized: true // Reject connections if client certificate is invalid
};
const server = https.createServer(serverOptions, app);
const wss = new WebSocket.Server({ server });

Okay, What I need:
Scripts from "openssl" command line to generate these loaded certificates on my code and a password protected client certificate so clients can connect with the prefix "wss://" on my server.


----

Check Client Certificate Details:
------------------------
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number:
            26:9d:74:70:8e:b8:a3:07:d0:a0:57:4b:12:b6:67:83:b6:7c:0d:b2
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = BR, ST = SP, L = Sao Paulo, O = Free Software, CN = MapTracking
        Validity
            Not Before: Dec 24 19:34:25 2023 GMT
            Not After : May  7 19:34:25 2025 GMT
        Subject: C = BR, ST = SP, L = Sao Paulo, O = Free Software, CN = MapTracking
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:c2:75:3a:04:3e:fd:f6:c1:c3:a8:91:29:e1:5c:
                    8b:49:f3:a2:9c:72:7b:aa:15:e5:fe:0c:d7:e4:f4:
                    11:05:d2:e8:e2:1b:82:4d:56:23:f9:58:fc:27:ae:
                    38:62:80:b2:50:c5:8f:8f:56:f0:6f:1c:c9:e9:18:
                    93:f4:a4:22:74:80:d4:43:22:d3:ca:78:fd:f9:81:
                    bc:3d:ab:11:5f:f2:78:6c:53:65:b0:53:26:b8:6b:
                    f9:db:67:d1:86:2f:37:20:97:2b:b9:ad:3e:d9:6e:
                    9d:41:00:5b:28:2c:d3:44:6b:92:17:a0:ad:18:e3:
                    02:d7:bb:ea:a8:e1:f5:2f:a1:ee:dc:03:50:2b:77:
                    31:62:f6:5c:48:37:72:ae:9e:a8:d8:8d:3d:8a:fc:
                    80:e4:e5:7a:f9:43:e6:c3:0a:5c:97:fb:3f:e0:4b:
                    82:d7:09:bb:8d:29:87:df:58:e0:a7:02:ce:3e:98:
                    f1:08:6c:0a:5c:04:24:df:66:c4:6a:20:ec:04:d2:
                    93:cf:4f:84:92:52:ec:1a:5d:55:b2:6d:df:fe:dd:
                    92:39:ce:e3:1a:21:76:3b:ad:a1:e2:a9:e7:9f:77:
                    b0:ca:9f:66:a9:cb:f3:e7:90:d9:08:37:b4:e1:33:
                    5a:3d:c1:2a:1e:69:da:43:35:de:4a:5b:c2:22:7e:
                    75:ad
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
    Signature Value:
        cf:9f:cb:03:ea:91:a8:10:b6:f9:f3:ec:83:61:d7:97:76:f0:
        8c:7a:da:19:b5:a3:ef:2a:5d:91:af:54:c7:0b:2b:6b:16:66:
        73:3b:02:fe:6e:75:af:8f:5e:18:0f:10:34:3a:04:84:e0:bd:
        8b:fa:a9:e7:f2:6d:e4:64:64:7f:c4:1b:d7:69:df:98:7b:5f:
        69:bd:49:a0:58:4a:de:e7:c9:5e:a1:50:e2:fa:de:de:7e:8d:
        3d:a1:7c:a6:ba:0a:e4:b1:03:86:55:97:5f:e9:f6:1d:92:13:
        b4:bd:e4:18:79:51:1f:f2:ec:dc:0a:7c:5f:90:5d:61:6e:0f:
        1b:a6:af:aa:b5:bc:94:14:ac:90:4b:bb:ad:78:0a:0e:c1:88:
        94:4b:5a:8d:b9:a6:9d:01:e3:e4:24:23:3a:5a:81:1b:2c:f3:
        a6:36:5b:20:12:85:a7:74:9c:66:ca:cd:c7:cc:d6:49:72:ff:
        4f:26:7e:23:b8:cc:b1:19:fc:ad:fc:53:18:a0:b4:d0:41:b2:
        f0:b1:b8:70:57:27:f7:00:ae:d3:36:5d:c6:d0:2a:0b:57:45:
        4d:68:6b:0c:c6:b0:17:b7:d3:ba:c2:b0:fe:87:db:4e:a0:b2:
        ba:e1:90:7a:48:88:ee:d6:1b:35:29:10:60:ef:ee:92:d0:76:
        57:43:7b:03
------------------------


Verify Client Certificate Against CA:
------------------------
$ openssl verify -CAfile rootCA.crt client.crt
C = BR, ST = SP, L = Sao Paulo, O = Free Software, CN = MapTracking
error 18 at 0 depth lookup: self-signed certificate
error client.crt: verification failed
------------------------



Check Private Key:
------------------------
$ openssl rsa -in client.key -check
RSA key ok
writing RSA key
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDCdToEPv32wcOo
kSnhXItJ86KccnuqFeX+DNfk9BEF0ujiG4JNViP5WPwnrjhigLJQxY+PVvBvHMnp
GJP0pCJ0gNRDItPKeP35gbw9qxFf8nhsU2WwUya4a/nbZ9GGLzcglyu5rT7Zbp1B
AFsoLNNEa5IXoK0Y4wLXu+qo4fUvoe7cA1ArdzFi9lxIN3KunqjYjT2K/IDk5Xr5
Q+bDClyX+z/gS4LXCbuNKYffWOCnAs4+mPEIbApcBCTfZsRqIOwE0pPPT4SSUuwa
XVWybd/+3ZI5zuMaIXY7raHiqeefd7DKn2apy/PnkNkIN7ThM1o9wSoeadpDNd5K
W8IifnWtAgMBAAECggEAJmZrV0jQMoEHf/twk4QIrokZ4L6bzJXn9c/390q6LNX+
Lp5jkB2VW4lWvAhDsrH65Ifq5lGzB6Id/jWgDBS4iByjrgFL5QUZFEMqFtx4ASQ6
4xth7pyw/gS2kbzx64dZ4cnwdMlxKpNVIu+s0KVvb+i1MAzG+e3kUxFVENYUKrw9
IUvTEZEdveaH1oYuBeshK30d5VDrddB1ySmhcjJp0MPr5ioo+ywLoIY1IGSMlpVG
g6QWgBHj16KIa7EtCKZ3EDTOlUPtMsx6ha8u4OwhcfjtgOvBBL6JvhPAjHWnzz8u
Sg/ENqlSOFujeHhBD4iTUT+sqdXxMsLXx1Hb5nbNmQKBgQD6PlaIVneDqXXOk4lD
l328urJqOrrcxfIfFc0mNLcg0Ie3qOxVPK8OBBGcxn2M9z47kLYSa6CXFjHYXuzR
sd0HrWsIj8XO6YUGTsaARWiojxFDabLEQUDKGQ1MJFfhJUsofb5xznlPimkJ9STA
Y7ScpYcSZatncZqYwlr82YWzJQKBgQDG7l9GztupSxluRxk8yqmP+D7cJaMXZQf3
/MZ2V13XPm8VRH2GL3FQ8crS96GU7nEH+1x3FfcN3YETwr7cRtxwOA3i066hpsXz
AXamG5ZF1xOu0+IGavGlC+Smn58NSexpat7YJ/BMag4zblQ3ekXl6B9PnhE3W7JL
u/wO9Sz16QKBgQC4myJFA9y5EVtqIKbjaS+F+gjCmz7cvV5nljK4W605FPz5/TET
lGfjpBbGHBvk0URkttXKcwGOU/5Di4uTCm5vSnyqXT3k7ZqH07dWS13w81Id9Cy/
4Q+Fx8Nqh2kZG+T9Iv5KgLI3fnkMsn8BOsyzvt0NMlmnP0R4KvDqlSGvzQKBgEYK
ugsxXFAwPAUDDZTE+ozRaDiVG+Zp0TN0keArBMR7nBsN4XB0ld5dM/+x5veMOMoJ
q9XWKwV7vy3Y/OCMJqNwaRs7UxphoQLdugvkXLW8c5azzbpavzhQhrJQM203YQEA
+vN6pHYTRWrAZvCdoazAXP3odsFaDN3zk10k4C65AoGAVHhE++Grgl8RP15pNrhm
8Q1npVT73uTdGHEDrU5pnYcF1YaolVRTGd8BCCDIP7YIiG+DnoDH4fUeDTwR8+NH
mdMeCz4HpXixdl/fzSkJS5orv8nowNB/2I1SQyTMadY5YXeob/H7oJ5LlaB+PBPW
bF5KSTLiBeL3bCyclac9AKs=
-----END PRIVATE KEY-----
------------------------

Check Certificate Chain:
------------------------
$ openssl verify -CAfile rootCA.crt -untrusted intermediateCA.crt client.crt
Could not open file or uri for loading certs of untrusted certificates from intermediateCA.crt: No such file or directory
------------------------


Am I missing any intermediate certificate?